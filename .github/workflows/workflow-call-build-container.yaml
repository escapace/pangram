on:
  workflow_call:
    inputs:
      context:
        required: true
        type: string
        description: 'Path to context archive.'
      dockerfile:
        default: 'Dockerfile'
        type: string
        description: 'Path to dockerfile.'
      args:
        required: false
        type: string
        default: ''
jobs:
  main:
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: download context archive
        uses: actions/download-artifact@v3
        with:
          name: package
          path: lib
      - name: docker login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: setup qemu
        uses: docker/setup-qemu-action@v2
      - name: docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: cache buildx
        uses: actions/cache@v3
        with:
          path: ~/.buildx
          key: ${{ runner.os }}-buildx-${{ hashFiles(inputs.context) }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ hashFiles(inputs.context) }}
            ${{ runner.os }}-buildx-
      - name: filter args
        id: filter
        shell: bash
        run: |
          declare -A ARGS

          filter () {
            while [[ $# -gt 0 ]]; do
              case $1 in
                --tag|--build-arg)
                  ARGS["$1 $2"]=0
                  shift 2
                  ;;
                *)
                  echo "Unknown option $1"
                  exit 1
              esac
            done

            echo "value=${!ARGS[@]}" >> $GITHUB_OUTPUT
          }

          split () {
            IFS=$'\n ' read -r -a array <<< "$*"

            echo "${array[@]}"
          }

          filter $(split ${{ inputs.args }})
      # TODO: https://github.com/moby/moby/issues/28394
      # --output type=image,oci-mediatypes=true,compression=zstd,compression-level=3,force-compression=true
      - name: build and push
        run: >-
          docker buildx build
          --cache-from type=local,src=$HOME/.buildx
          --cache-to   type=local,dest=$HOME/.buildx,mode=max
          --file "${{ inputs.dockerfile }}"
          --platform linux/amd64,linux/arm64
          ${{ steps.filter.outputs.value }}
          --push - < "${{ inputs.context }}"
